GENUS, SPECIES, STR, REPLICON = glob_wildcards("data/{genus}_{species}_{str}_{replicon}.fna")
TEMP_DIR = 'intermediate_files/combined_proteins'
COMBINED_PROTEINS = os.path.join(TEMP_DIR,'combined_proteins.fasta')

#SAMPLE= expand('{genus}_{species}{str}')
COMPARISON_DIR = "intermediate_files/clustering"
#CDHIT_PROTEIN_CLUSTER = os.path.join('..' ,COMPARISON_DIR,'cd-hit','protein_cluster.clstr')
CDHIT_2D = os.path.join(COMPARISON_DIR,'cd-hit','cd_hit_2d.clstr')
CDHIT_NEW = os.path.join(COMPARISON_DIR,'cd-hit','cd_hit_new.clstr')
CDHIT_FINAL = os.path.join(COMPARISON_DIR,'cd-hit','cd_hit_final.clstr')
CDHIT_FINAL_FASTA = os.path.join(COMPARISON_DIR,'cd-hit','cd_hit_final')
CDHIT_FASTA_NEW = os.path.join(COMPARISON_DIR,'cd-hit','cd_hit_new')

CDHIT_IDENTITY = '0.8'
CDHIT_MINOVERLAP = '0.8'
THREADS = 12

###Matrices from cd-hit
MATRIX_DIR = "intermediate_files/matrices_cdhit"
CDHIT_MATRIX = os.path.join(MATRIX_DIR, 'cd-hit','orthogous_groups.txt')
CDHIT_ABSENCE_PRESENCE_MATRIX = os.path.join(MATRIX_DIR, 'cd-hit','absence_presence_matrix.txt')
CLUSTER_SEQS = "intermediate_files/cluster_seqs"





GENBANKFILES, = glob_wildcards("intermediate_files/annot/{genome}.gbk")
NEWTAGFILE = "intermediate_files/combined_proteins/id2tags.tsv"
EGGNOG_ANNOTATION = 'intermediate_files/eggnog_annotation/eggnog_annotation.emapper.annotations'
EGGNOG_DATA = 'intermediate_files/mapper_data'
KEGG_ANNOTATION = "intermediate_files/kegg_annotation/KEGG_annotation_clean.faa.finalkegg"
KEGG_DESCRIPTIONS = "src/ko_description.txt"
COG_ANNOTATION = "intermediate_files/cog_annotation/COG_annotation_clean.faa.finalcog"


MEGAMATRIX = "../MEGAMATRIX.txt"
CORRECTED_MAPPING_FILE = '../corrected_mapping_file.txt'


rule final:
        input:
            prokka = expand('intermediate_files/annot/{species}_{str}_{replicon}/{genus}_{species}_{str}_{replicon}.gbk', zip, genus = GENUS, species = SPECIES, str = STR, replicon = REPLICON),
            extprot = expand('intermediate_files/annot/{species}_{str}_{replicon}/{genus}_{species}_{str}_{replicon}.ext_prot.faa', zip, genus = GENUS, species = SPECIES, str = STR, replicon = REPLICON),
            protein_combine = 'intermediate_files/combined_proteins/combined_proteins.fasta.orig',
            protein_rename = COMBINED_PROTEINS,
            cdhit = CDHIT_FINAL,
            cdhit_matrix = CDHIT_ABSENCE_PRESENCE_MATRIX,
            cdhit_new = CDHIT_FASTA_NEW,
            new_megamatrix = 'MEGAMATRIX_noupdated.txt',
            new_mapping_file = 'corrected_mapping_file.txt',
            kegg_clean_annotation = KEGG_ANNOTATION,
            cog_clean_annotation = COG_ANNOTATION,
            updated_megamatrix = 'MEGAMATRIX.txt'
            

rule directories:
        input:
            expand("data/{genus}_{species}_{str}_{replicon}.fna", zip, genus = GENUS, species = SPECIES, str = STR, replicon = REPLICON)
        params:
            annot = "intermediate_files/annot/",
            eggnog = "intermediate_files/eggnog_annotation/",
            mapper = "intermediate_files/mapper_data/"
        output:
            chk = ".mkdir.chkpnt"
        run:
            shell("mkdir -p {params}")
            shell("touch .mkdir.chkpnt")

rule Prokka_annotation:
        input:
            file = "data/{genus}_{species}_{str}_{replicon}.fna",
            dir = rules.directories.output
        output:
            prokka = 'intermediate_files/annot/{species}_{str}_{replicon}/{genus}_{species}_{str}_{replicon}.gbk',
            prokka2 = 'intermediate_files/annot/{species}_{str}_{replicon}/{genus}_{species}_{str}_{replicon}.faa'
        message: 'executing prokka.'
        params:
            genus = "{genus}",
            species = "{species}",
            str = "{str}",
            outdir = "intermediate_files/annot/{species}_{str}_{replicon}",
            prefix = "{genus}_{species}_{str}_{replicon}"
        threads: THREADS
        priority: 100
        run:
                shell('prokka --force --outdir {params.outdir} --prefix {params.prefix} --locustag {params.str} --addgenes --increment 5 --centre NIOO-KNAW --genus {params.genus} --species {params.species} --str {params.str} --gcode 11 --cpus {threads} --evalue 1e-03 --rfam {input.file}')

rule extract_proteins:
    input: rules.Prokka_annotation.output.prokka
    output:
        faa = 'intermediate_files/annot/{species}_{str}_{replicon}/{genus}_{species}_{str}_{replicon}.ext_prot.faa',
        tags = 'intermediate_files/annot/{species}_{str}_{replicon}/{genus}_{species}_{str}_{replicon}.ext_prot.faa.tags'
    message: 'Executing genbank_to_protein_fasta on the following files {input}.'
    shell:
        'python ../src/genbank_to_protein_fasta.py --genbank {input} --fasta {output.faa}'

rule protein_combine:
    input:
        #faa = expand('intermediate_files/annot/{genbankfile}.ext_prot.faa',  genbankfile=GENBANKFILES),
        #tags = expand('intermediate_files/annot/{genbankfile}.ext_prot.faa.tags', genbankfile=GENBANKFILES)
        faa = expand(rules.extract_proteins.output.faa, zip, genus = GENUS, species = SPECIES, str = STR, replicon = REPLICON),
        tags = expand(rules.extract_proteins.output.tags, zip, genus = GENUS, species = SPECIES, str = STR, replicon = REPLICON)
    output:
        orig = "%s.orig"%COMBINED_PROTEINS,
        tags = "%s.tags"%COMBINED_PROTEINS
    log: 'log/protein_combine.log'
    run:
        shell('cat {input.faa} >  {output.orig}')
        shell('cat {input.tags} >  {output.tags}')

rule protein_rename:
    input:
        orig = rules.protein_combine.output.orig,
        tags = rules.protein_combine.output.tags
    output: 
        combined_proteins = COMBINED_PROTEINS,
        newtagfile = NEWTAGFILE
    run:
        shell('python ../src/rename_proteins.py -f {input.orig} -t {input.tags} -o {output.combined_proteins} -n {output.newtagfile}')

rule cdhit:
    input:
        original_fasta = '../intermediate_files/clustering/cd-hit/protein_cluster',
        original_clstr = '../intermediate_files/clustering/cd-hit/protein_cluster.clstr',
        new_fasta = COMBINED_PROTEINS
    output:
        clusters = CDHIT_FINAL,
        fasta = CDHIT_FINAL_FASTA,
        output_new = os.path.splitext(CDHIT_NEW)[0],
    params:
        output_2d = os.path.splitext(CDHIT_2D)[0],
        output_2d_clstr = 'intermediate_files/clustering/cd-hit/cd_hit_2d.clstr',
        
        output_new_clstr = 'intermediate_files/clustering/cd-hit/cd_hit_new.clstr',
        temp = "intermediate_files/clustering/cd-hit/temp.clstr",
        original_combined_proteins = '../intermediate_files/combined_proteins/combined_proteins.fasta',
        combined_proteins_merged = 'intermediate_files/combined_proteins/combined_proteins_merged.fasta'
    threads: THREADS
    run:
        shell('cd-hit-2d -i {input.original_fasta} -i2 {input.new_fasta} -o {params.output_2d} -n 4 -c 0.75 -g 1 -G 1 -aS {CDHIT_MINOVERLAP} -aL 0.8 -s 0.8 -d 0 -p 1 -T {threads} -M 0')
        shell('cd-hit -i {params.output_2d} -o {output.output_new} -c {CDHIT_IDENTITY} -n 4 -c 0.75 -g 1 -G 1 -aS {CDHIT_MINOVERLAP} -aL 0.8 -s 0.8 -d 0 -p 1 -T {threads} -M 0')
        shell('cat {input.original_fasta} {output.output_new} > {output.fasta}')
        shell('cat {input.new_fasta} {params.original_combined_proteins} > {params.combined_proteins_merged}')
        shell('python src/merge_clstr.py -i1 {input.original_clstr} -i2 {params.output_2d_clstr} -o {params.temp}' )
        shell('python src/merge_clstr2.py -i1 {params.temp} -i2 {params.output_new_clstr} -o {output.clusters}')




rule matrix_from_cdhit:
    input: rules.cdhit.output.clusters
    output:
        ogfile = CDHIT_MATRIX,
        absence_presence_matrix = CDHIT_ABSENCE_PRESENCE_MATRIX,
    params:
        path = os.path.join(CLUSTER_SEQS, 'cd-hit'),
        fasta = 'intermediate_files/combined_proteins/combined_proteins_merged.fasta'
    run:
        shell('python ../src/cdhit_to_orthomcl.py --ogfile {output.ogfile} --path {params.path} --fasta {params.fasta} --clusters {input} --absence_presence_matrix {output.absence_presence_matrix}')



rule join_matrices:
    input:
        new_abs_pres= rules.matrix_from_cdhit.output.absence_presence_matrix,
        old_abs_pres= '../MEGAMATRIX.txt'
    params:
        mapping_file = '../corrected_mapping_file.txt',
        lifestyle = 'New'
    output:
        new_MEGAMATRIX = 'MEGAMATRIX_noupdated.txt',
        new_mapping_file = 'corrected_mapping_file.txt'
    run:
        shell('Rscript src/merge_matrices.R {input.old_abs_pres} {input.new_abs_pres} {params.mapping_file} {params.lifestyle}' )
    

rule EGGNOG:
    input:
        rules.cdhit.output.output_new
    params:
        data = EGGNOG_DATA
    output:
        EGGNOG_ANNOTATION
    run:
        shell('download_eggnog_data.py -y --data_dir {params.data}')
        shell('emapper.py -i {input} --cpu 25 -o intermediate_files/eggnog_annotation/eggnog_annotation --data_dir {params.data} --pident 40 --query_cover 50 --subject_cover 50 --report_orthologs')

rule KEGG_COG:
    input:
        rules.EGGNOG.output
    params:
        kegg_descriptions = KEGG_DESCRIPTIONS,
        cog_descriptions = "./src/cog_annotation_groups.csv",
    output:
        clean_annotation = 'intermediate_files/eggnog_annotation/eggnog_annotation.emapper.clean.annotations',
        cog = COG_ANNOTATION,
        kegg = KEGG_ANNOTATION
    run:
        shell("sed '/^#/d' {input} > {output.clean_annotation}")
        shell('Rscript src/COG_KEGG_annotations.R {output.clean_annotation} {params.cog_descriptions} {params.kegg_descriptions} {output.cog} {output.kegg}')


rule update_KEGG_COG:
    input:
        orth_groups = rules.matrix_from_cdhit.output.ogfile,
        cog = rules.KEGG_COG.output.cog,
        kegg = rules.KEGG_COG.output.kegg,
        matrix = rules.join_matrices.output.new_MEGAMATRIX
    output:
        MEGAMATRIX = 'MEGAMATRIX.txt'
    run:
        shell('Rscript src/update_COG_KEGG.R {input.orth_groups} {input.matrix} {input.cog} {input.kegg} {output.MEGAMATRIX}')
    
    
    
    
    
    
